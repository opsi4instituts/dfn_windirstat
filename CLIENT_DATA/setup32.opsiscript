[Actions]
; common Values for (un)installation
include_insert "common.opsiinc"

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
	; Stop process and set installation status to failed
else
	if FileExists("%ScriptPath%\delsub32.opsiscript")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub32.opsiscript"
	endif
	
	Message "Installing %installingProdName% (%installingProdVersion%) 32 Bit..."
	
	comment "Copy files"
	Files_install
	
	comment "Test for installation success"
	;Test if exe file exists
	if FileExists($PathToExe$)
		; Verifies if product version number matches installed version number
		set $FileInfoList$ = getFileInfoMap($PathToExe$)
		set $InstalledVersion$ = getValue("file version with dots", $FileInfoList$)
		; executable file version consistently has an extra zero digit at the end, therefore substring comparison
		if not (contains($InstalledVersion$, $ProductVersion$))
			logError "Fatal: Installed product version is " + $InstalledVersion$ + " but is supposed to be " + $ProductVersion$
			isFatalError
		endif	

		;create registry entry for installed software
		Registry_install /32Bit
		
		if $DesktopLink$ = "True"
			comment "Create common desktop link"
			Linkfolder_create_desktoplink	
		endif

		if $StartmenuEntry$ = "True"
			comment "Create common startmenu entry"
			Linkfolder_create_startmenu	
		endif
		
		if $ContextMenu$ = "True"
			comment "Create context menu entries"
			Registry_install_context-menu
		endif

		comment "include custom post install file"
		set $CustomPostInstall$ = getProductProperty("custom-post-install","none")
		if not ($CustomPostInstall$ = "none")
			if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
				include_insert "%ScriptPath%\custom\" + $CustomPostInstall$
			endif
		endif
	else
		logError "After installation $PathToExe$ not found"
		isFatalError
	endif
endif

[Files_install]
copy "%ScriptPath%\files\*.*" "$InstallDir$"

[Registry_install]
; da wir keinen Installer nehmen, müssen ein paar notwendige Keys angelegt werden, damit sie unter 'Systemeinstellungen' > 'Software und Funktionen' auftaucht
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$ProductName$]
set "DisplayName" = REG_SZ:"$ProductName$ (OPSI-Version: %installingProdVersion%)"
set "DisplayIcon" = REG_SZ:"$PathToExe$"
set "DisplayVersion" = REG_SZ:"$ProductVersion$"
set "InstallLocation" = REG_SZ:"$InstallDir$"
set "UninstallDirectory" = REG_SZ:"$InstallDir$"
;UninstallString ist der entscheidende Eintrag, damit es überhaupt angezeigt wird!
;da es in diesem Fall keine Deinstallationsroutine gibt, rufen wir ein VBS mit einem Hinweis auf
set "UninstallString" = REG_SZ:'wscript "$InstallDir$\uninstall.vbs"'
set "NoRepair" = REG_DWORD:0001
set "NoModify" = REG_DWORD:0001

[Registry_install_context-menu]
openkey [HKEY_CLASSES_ROOT\Directory\shell\$ProductId$]
set "" = REG_SZ: "$ProductName$"
openkey [HKEY_CLASSES_ROOT\Directory\shell\$ProductId$\command]
set "" = REG_SZ: '"$PathToExe$" "%1"'
openkey [HKEY_CLASSES_ROOT\Drive\shell\$ProductId$]
set "" = REG_SZ: "$ProductName$"
openkey [HKEY_CLASSES_ROOT\Drive\shell\$ProductId$\command]
set "" = REG_SZ: '"$PathToExe$" "%1\"'

[Linkfolder_create_desktoplink]
set_basefolder common_desktopdirectory
set_subfolder ""

set_link
 	name: $ProductName$
 	target: $PathToExe$
end_link

[Linkfolder_create_startmenu]
set_basefolder common_programs
set_subfolder $ProductName$

set_link
 	name: $ProductName$
 	target: $PathToExe$
end_link

